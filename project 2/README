{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;}
\paperw11900\paperh16840\margl1440\margr1440\vieww21640\viewh11760\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf2 \expnd0\expndtw0\kerning0
# Building the project\
We use Maven for build automation. In order to build the project tinyIR should be installed in the Maven local repository using the following command:\
mvn install:install-file "-Dfile=tinyir-1.1.jar" "-DgroupId=ch.ethz.dal" "-DartifactId=tinyir" "-Dversion=1.1.0" "-Dpackaging=jar"\
\
Then the project can be built using:\
mvn package\
\
The produced jar which includes all dependencies is located at:\
target/retrievalsystem-0.0.1-SNAPSHOT-jar-with-dependencies.jar\
\
# Running the project\
When running the jar, the working directory must contain a folder data with the following directory tree:\
data\
|--documents.zip\
|--questions-descriptions.txt\
|--relevance-judgements.csv\
|--test-questions.txt\
\
The generic call in order to train the models is the following. The parameters are explained by comments in the code\
\
java -Xmx5G -jar target/retrievalsystem-0.0.1-SNAPSHOT-jar-with-dependencies.jar <model> <useIndex> <vocabularyThreshold> <characterThreshold> <numTopics> <numIters> <mu> <lambda> <smoothing>\
\
To train the term-based model and output the predictions for the test set in ranking-t-18.run:\
\
java -Xmx5G -jar target/retrievalsystem-0.0.1-SNAPSHOT-jar-with-dependencies.jar term true 10 15 400 20 100 0.9 bayes\
\
To train the language model and output the predictions for the test set in ranking-l-18.run:\
\
java -Xmx5G -jar target/retrievalsystem-0.0.1-SNAPSHOT-jar-with-dependencies.jar language true 10 15 400 20 100 0.9 bayes}